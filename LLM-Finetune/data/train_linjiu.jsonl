{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic char * normG2BSource(char * data)\n{\ndata = (char *)ALLOCA(100*sizeof(char));\nstrcpy(data, \"A String\");\nprintLine(data);\nreturn data;\n}\nstatic char * normB2GSource(char * data)\n{\ndata = (char *)calloc(100, sizeof(char));\nif (data == NULL) {exit(-1);}\nstrcpy(data, \"A String\");\nprintLine(data);\nreturn data;\n}\nstatic void normB2G()\n{\nchar * data;\ndata = NULL;\ndata = normB2GSource(data);\nfree(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic char * normSource(char * data)\n{\ndata = (char *)calloc(100, sizeof(char));\nif (data == NULL) {exit(-1);}\nstrcpy(data, \"A String\");\nprintLine(data);\nreturn data;\n}\nvoid FUNC_char_calloc_42_norm()\n{\nchar * data;\ndata = NULL;\ndata = normSource(data);\n\n;\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_char_calloc_42_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nstatic void normB2G1()\n{\nchar * data;\ndata = NULL;\nif(STATIC_CONST_FIVE==5)\n{\ndata = (char *)malloc(100*sizeof(char));\nif (data == NULL) {exit(-1);}\nstrcpy(data, \"A String\");\nprintLine(data);\n}\nif(STATIC_CONST_FIVE!=5)\n{\n}\nelse\n{\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nvoid FUNC_char_malloc_06_norm()\n{\nchar * data;\ndata = NULL;\nif(STATIC_CONST_FIVE==5)\n{\ndata = (char *)malloc(100*sizeof(char));\nif (data == NULL) {exit(-1);}\nstrcpy(data, \"A String\");\nprintLine(data);\n}\nif(STATIC_CONST_FIVE==5)\n{\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_char_malloc_06_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normB2G()\n{\nint * data;\ndata = NULL;\ngoto source;\nsource:\ndata = (int *)calloc(100, sizeof(int));\nif (data == NULL) {exit(-1);}\ndata[0] = 5;\nprintIntLine(data[0]);\ngoto sink;\nsink:\nfree(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_int_calloc_18_norm()\n{\nint * data;\ndata = NULL;\ngoto source;\nsource:\ndata = (int *)calloc(100, sizeof(int));\nif (data == NULL) {exit(-1);}\ndata[0] = 5;\nprintIntLine(data[0]);\ngoto sink;\nsink:\n\n;\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int_calloc_18_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nstatic void normB2G1()\n{\nint * data;\ndata = NULL;\nif(STATIC_CONST_FIVE==5)\n{\ndata = (int *)malloc(100*sizeof(int));\nif (data == NULL) {exit(-1);}\ndata[0] = 5;\nprintIntLine(data[0]);\n}\nif(STATIC_CONST_FIVE!=5)\n{\n}\nelse\n{\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nvoid FUNC_int_malloc_06_norm()\n{\nint * data;\ndata = NULL;\nif(STATIC_CONST_FIVE==5)\n{\ndata = (int *)malloc(100*sizeof(int));\nif (data == NULL) {exit(-1);}\ndata[0] = 5;\nprintIntLine(data[0]);\n}\nif(STATIC_CONST_FIVE==5)\n{\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int_malloc_06_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normB2G1()\n{\nint64_t * data;\ndata = NULL;\nif(1)\n{\ndata = (int64_t *)calloc(100, sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\n}\nif(0)\n{\n}\nelse\n{\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_int64_t_calloc_02_norm()\n{\nint64_t * data;\ndata = NULL;\nif(1)\n{\ndata = (int64_t *)calloc(100, sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\n}\nif(1)\n{\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int64_t_calloc_02_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normG2BSink(int64_t * data)\n{\n;\n}\nstatic void normG2B()\n{\nint64_t * data;\nvoid (*funcPtr) (int64_t *) = normG2BSink;\ndata = NULL;\ndata = (int64_t *)ALLOCA(100*sizeof(int64_t));\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nfuncPtr(data);\n}\nstatic void normB2GSink(int64_t * data)\n{\nfree(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normSink(int64_t * data)\n{\n\n;\n}\nvoid FUNC_int64_t_calloc_44_norm()\n{\nint64_t * data;\nvoid (*funcPtr) (int64_t *) = normSink;\ndata = NULL;\ndata = (int64_t *)calloc(100, sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nfuncPtr(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int64_t_calloc_44_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normB2G()\n{\nint i,k;\nint64_t * data;\ndata = NULL;\nfor(i = 0; i < 1; i++)\n{\ndata = (int64_t *)malloc(100*sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\n}\nfor(k = 0; k < 1; k++)\n{\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_int64_t_malloc_17_norm()\n{\nint i,j;\nint64_t * data;\ndata = NULL;\nfor(i = 0; i < 1; i++)\n{\ndata = (int64_t *)malloc(100*sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\n}\nfor(j = 0; j < 1; j++)\n{\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int64_t_malloc_17_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normB2G1()\n{\nint64_t * data;\ndata = NULL;\nif(5==5)\n{\ndata = (int64_t *)realloc(data, 100*sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\n}\nif(5!=5)\n{\n}\nelse\n{\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_int64_t_realloc_03_norm()\n{\nint64_t * data;\ndata = NULL;\nif(5==5)\n{\ndata = (int64_t *)realloc(data, 100*sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\n}\nif(5==5)\n{\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int64_t_realloc_03_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\ntypedef union\n{\nint64_t * unionFirst;\nint64_t * unionSecond;\n} CWE401_Memory_Leak__int64_t_realloc_34_unionType;\nstatic void normG2B()\n{\nint64_t * data;\nCWE401_Memory_Leak__int64_t_realloc_34_unionType myUnion;\ndata = NULL;\ndata = (int64_t *)ALLOCA(100*sizeof(int64_t));\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nmyUnion.unionFirst = data;\n{\nint64_t * data = myUnion.unionSecond;\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\ntypedef union\n{\nint64_t * unionFirst;\nint64_t * unionSecond;\n} FUNC_int64_t_realloc_34_unionType;\nvoid FUNC_int64_t_realloc_34_norm()\n{\nint64_t * data;\nFUNC_int64_t_realloc_34_unionType myUnion;\ndata = NULL;\ndata = (int64_t *)realloc(data, 100*sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nmyUnion.unionFirst = data;\n{\nint64_t * data = myUnion.unionSecond;\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int64_t_realloc_34_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normG2BSink(int64_t * data)\n{\n;\n}\nstatic void normB2GSink(int64_t * data)\n{\nfree(data);\n}\nstatic void normB2G()\n{\nint64_t * data;\ndata = NULL;\ndata = (int64_t *)realloc(data, 100*sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nnormB2GSink(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normSink(int64_t * data)\n{\n\n;\n}\nvoid FUNC_int64_t_realloc_41_norm()\n{\nint64_t * data;\ndata = NULL;\ndata = (int64_t *)realloc(data, 100*sizeof(int64_t));\nif (data == NULL) {exit(-1);}\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nnormSink(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_int64_t_realloc_41_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void norm1()\n{\nswitch(5)\n{\ncase 6:\nbreak;\ndefault:\n{\nchar * data = (char *)malloc(100*sizeof(char));\nif (data == NULL) {exit(-1);}\nchar * tmpData;\nstrcpy(data, \"A String\");\nprintLine(data);\ntmpData = (char *)realloc(data, (130000)*sizeof(char));\nif (tmpData != NULL)\n{\ndata = tmpData;\nstrcpy(data, \"New String\");\nprintLine(data);\n}\nfree(data);\n}\nbreak;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_malloc_realloc_char_15_norm()\n{\nswitch(6)\n{\ncase 6:\n{\nchar * data = (char *)malloc(100*sizeof(char));\nif (data == NULL) {exit(-1);}\nstrcpy(data, \"A String\");\nprintLine(data);\ndata = (char *)realloc(data, (130000)*sizeof(char));\nif (data != NULL)\n{\nstrcpy(data, \"New String\");\nprintLine(data);\nfree(data);\n}\n}\nbreak;\ndefault:\nbreak;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_malloc_realloc_char_15_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void norm1()\n{\n{\nint * data = (int *)malloc(100*sizeof(int));\nif (data == NULL) {exit(-1);}\nint * tmpData;\ndata[0] = 5;\nprintIntLine(data[0]);\ntmpData = (int *)realloc(data, (130000)*sizeof(int));\nif (tmpData != NULL)\n{\ndata = tmpData;\ndata[0] = 10;\nprintIntLine(data[0]);\n}\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_malloc_realloc_int_01_norm()\n{\n{\nint * data = (int *)malloc(100*sizeof(int));\nif (data == NULL) {exit(-1);}\ndata[0] = 5;\nprintIntLine(data[0]);\ndata = (int *)realloc(data, (130000)*sizeof(int));\nif (data != NULL)\n{\ndata[0] = 10;\nprintIntLine(data[0]);\nfree(data);\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_malloc_realloc_int_01_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticReturnsTrue()\n{\nreturn 1;\n}\nstatic int staticReturnsFalse()\n{\nreturn 0;\n}\nstatic void norm1()\n{\nif(staticReturnsFalse())\n{\n}\nelse\n{\n{\nint * data = (int *)malloc(100*sizeof(int));\nif (data == NULL) {exit(-1);}\nint * tmpData;\ndata[0] = 5;\nprintIntLine(data[0]);\ntmpData = (int *)realloc(data, (130000)*sizeof(int));\nif (tmpData != NULL)\n{\ndata = tmpData;\ndata[0] = 10;\nprintIntLine(data[0]);\n}\nfree(data);\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticReturnsTrue()\n{\nreturn 1;\n}\nstatic int staticReturnsFalse()\n{\nreturn 0;\n}\nvoid FUNC_malloc_realloc_int_08_norm()\n{\nif(staticReturnsTrue())\n{\n{\nint * data = (int *)malloc(100*sizeof(int));\nif (data == NULL) {exit(-1);}\ndata[0] = 5;\nprintIntLine(data[0]);\ndata = (int *)realloc(data, (130000)*sizeof(int));\nif (data != NULL)\n{\ndata[0] = 10;\nprintIntLine(data[0]);\nfree(data);\n}\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_malloc_realloc_int_08_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void norm1()\n{\n{\nstruct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\nstruct _twoIntsStruct * tmpData;\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\ntmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));\nif (tmpData != NULL)\n{\ndata = tmpData;\ndata[0].intOne = 1;\ndata[0].intTwo = 1;\nprintStructLine((twoIntsStruct *)&data[0]);\n}\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_malloc_realloc_struct_twoIntsStruct_01_norm()\n{\n{\nstruct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\ndata = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));\nif (data != NULL)\n{\ndata[0].intOne = 1;\ndata[0].intTwo = 1;\nprintStructLine((twoIntsStruct *)&data[0]);\nfree(data);\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_malloc_realloc_struct_twoIntsStruct_01_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nstatic void norm1()\n{\nif(STATIC_CONST_FIVE!=5)\n{\n}\nelse\n{\n{\ntwoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ntwoIntsStruct * tmpData;\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\ntmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));\nif (tmpData != NULL)\n{\ndata = tmpData;\ndata[0].intOne = 1;\ndata[0].intTwo = 1;\nprintStructLine(&data[0]);\n}\nfree(data);\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nvoid FUNC_malloc_realloc_twoIntsStruct_06_norm()\n{\nif(STATIC_CONST_FIVE==5)\n{\n{\ntwoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\ndata = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));\nif (data != NULL)\n{\ndata[0].intOne = 1;\ndata[0].intTwo = 1;\nprintStructLine(&data[0]);\nfree(data);\n}\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_malloc_realloc_twoIntsStruct_06_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void norm1()\n{\nint k;\nfor(k = 0; k < 1; k++)\n{\n{\ntwoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ntwoIntsStruct * tmpData;\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\ntmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));\nif (tmpData != NULL)\n{\ndata = tmpData;\ndata[0].intOne = 1;\ndata[0].intTwo = 1;\nprintStructLine(&data[0]);\n}\nfree(data);\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_malloc_realloc_twoIntsStruct_17_norm()\n{\nint j;\nfor(j = 0; j < 1; j++)\n{\n{\ntwoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\ndata = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));\nif (data != NULL)\n{\ndata[0].intOne = 1;\ndata[0].intTwo = 1;\nprintStructLine(&data[0]);\nfree(data);\n}\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_malloc_realloc_twoIntsStruct_17_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticFive = 5;\nstatic void norm1()\n{\nif(staticFive!=5)\n{\n}\nelse\n{\n{\nwchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));\nif (data == NULL) {exit(-1);}\nwchar_t * tmpData;\nwcscpy(data, L\"A String\");\nprintWLine(data);\ntmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));\nif (tmpData != NULL)\n{\ndata = tmpData;\nwcscpy(data, L\"New String\");\nprintWLine(data);\n}\nfree(data);\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticFive = 5;\nvoid FUNC_malloc_realloc_wchar_t_07_norm()\n{\nif(staticFive==5)\n{\n{\nwchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));\nif (data == NULL) {exit(-1);}\nwcscpy(data, L\"A String\");\nprintWLine(data);\ndata = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));\nif (data != NULL)\n{\nwcscpy(data, L\"New String\");\nprintWLine(data);\nfree(data);\n}\n}\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_malloc_realloc_wchar_t_07_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_array_char_02\n{\nstatic void normB2G1()\n{\nchar * data;\ndata = NULL;\nif(1)\n{\ndata = new char[100];\nstrcpy(data, \"A String\");\nprintLine(data);\n}\nif(0)\n{\n}\nelse\n{\ndelete[] data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_array_char_02;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_array_char_02\n{\nvoid norm()\n{\nchar * data;\ndata = NULL;\nif(1)\n{\ndata = new char[100];\nstrcpy(data, \"A String\");\nprintLine(data);\n}\nif(1)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_array_char_02;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_array_char_34\n{\ntypedef union\n{\nchar * unionFirst;\nchar * unionSecond;\n} unionType;\nstatic void normG2B()\n{\nchar * data;\nunionType myUnion;\ndata = NULL;\nchar datanormBuffer[100];\ndata = datanormBuffer;\nstrcpy(data, \"A String\");\nprintLine(data);\nmyUnion.unionFirst = data;\n{\nchar * data = myUnion.unionSecond;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_array_char_34;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_array_char_34\n{\ntypedef union\n{\nchar * unionFirst;\nchar * unionSecond;\n} unionType;\nvoid norm()\n{\nchar * data;\nunionType myUnion;\ndata = NULL;\ndata = new char[100];\nstrcpy(data, \"A String\");\nprintLine(data);\nmyUnion.unionFirst = data;\n{\nchar * data = myUnion.unionSecond;\n\n;\n}\n}\n}\nusing namespace FUNC_new_array_char_34;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_array_int64_t_34\n{\ntypedef union\n{\nint64_t * unionFirst;\nint64_t * unionSecond;\n} unionType;\nstatic void normG2B()\n{\nint64_t * data;\nunionType myUnion;\ndata = NULL;\nint64_t datanormBuffer[100];\ndata = datanormBuffer;\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nmyUnion.unionFirst = data;\n{\nint64_t * data = myUnion.unionSecond;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_array_int64_t_34;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_array_int64_t_34\n{\ntypedef union\n{\nint64_t * unionFirst;\nint64_t * unionSecond;\n} unionType;\nvoid norm()\n{\nint64_t * data;\nunionType myUnion;\ndata = NULL;\ndata = new int64_t[100];\ndata[0] = 5LL;\nprintLongLongLine(data[0]);\nmyUnion.unionFirst = data;\n{\nint64_t * data = myUnion.unionSecond;\n\n;\n}\n}\n}\nusing namespace FUNC_new_array_int64_t_34;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_array_TwoIntsClass_16\n{\nstatic void normB2G()\n{\nTwoIntsClass * data;\ndata = NULL;\nwhile(1)\n{\ndata = new TwoIntsClass[100];\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintIntLine(data[0].intOne);\nprintIntLine(data[0].intTwo);\nbreak;\n}\nwhile(1)\n{\ndelete[] data;\nbreak;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_array_TwoIntsClass_16;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_array_TwoIntsClass_16\n{\nvoid norm()\n{\nTwoIntsClass * data;\ndata = NULL;\nwhile(1)\n{\ndata = new TwoIntsClass[100];\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintIntLine(data[0].intOne);\nprintIntLine(data[0].intTwo);\nbreak;\n}\nwhile(1)\n{\n\n;\nbreak;\n}\n}\n}\nusing namespace FUNC_new_array_TwoIntsClass_16;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_array_twointsStruct_31\n{\nstatic void normG2B()\n{\ntwoIntsStruct * data;\ndata = NULL;\ntwoIntsStruct datanormBuffer[100];\ndata = datanormBuffer;\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\n{\ntwoIntsStruct * dataCopy = data;\ntwoIntsStruct * data = dataCopy;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_array_twointsStruct_31;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_array_twointsStruct_31\n{\nvoid norm()\n{\ntwoIntsStruct * data;\ndata = NULL;\ndata = new twoIntsStruct[100];\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\n{\ntwoIntsStruct * dataCopy = data;\ntwoIntsStruct * data = dataCopy;\n\n;\n}\n}\n}\nusing namespace FUNC_new_array_twointsStruct_31;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_TRUE = 1;\nstatic const int STATIC_CONST_FALSE = 0;\nnamespace CWE401_Memory_Leak__new_array_wchar_t_04\n{\nstatic void normB2G1()\n{\nwchar_t * data;\ndata = NULL;\nif(STATIC_CONST_TRUE)\n{\ndata = new wchar_t[100];\nwcscpy(data, L\"A String\");\nprintWLine(data);\n}\nif(STATIC_CONST_FALSE)\n{\n}\nelse\n{\ndelete[] data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_array_wchar_t_04;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_TRUE = 1;\nstatic const int STATIC_CONST_FALSE = 0;\nnamespace FUNC_new_array_wchar_t_04\n{\nvoid norm()\n{\nwchar_t * data;\ndata = NULL;\nif(STATIC_CONST_TRUE)\n{\ndata = new wchar_t[100];\nwcscpy(data, L\"A String\");\nprintWLine(data);\n}\nif(STATIC_CONST_TRUE)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_array_wchar_t_04;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_array_wchar_t_34\n{\ntypedef union\n{\nwchar_t * unionFirst;\nwchar_t * unionSecond;\n} unionType;\nstatic void normG2B()\n{\nwchar_t * data;\nunionType myUnion;\ndata = NULL;\nwchar_t datanormBuffer[100];\ndata = datanormBuffer;\nwcscpy(data, L\"A String\");\nprintWLine(data);\nmyUnion.unionFirst = data;\n{\nwchar_t * data = myUnion.unionSecond;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_array_wchar_t_34;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_array_wchar_t_34\n{\ntypedef union\n{\nwchar_t * unionFirst;\nwchar_t * unionSecond;\n} unionType;\nvoid norm()\n{\nwchar_t * data;\nunionType myUnion;\ndata = NULL;\ndata = new wchar_t[100];\nwcscpy(data, L\"A String\");\nprintWLine(data);\nmyUnion.unionFirst = data;\n{\nwchar_t * data = myUnion.unionSecond;\n\n;\n}\n}\n}\nusing namespace FUNC_new_array_wchar_t_34;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_char_32\n{\nstatic void normG2B()\n{\nchar * data;\nchar * *dataPtr1 = &data;\nchar * *dataPtr2 = &data;\ndata = NULL;\n{\nchar * data = *dataPtr1;\nchar datanormBuffer;\ndata = &datanormBuffer;\n*data = 'A';\nprintHexCharLine(*data);\n*dataPtr1 = data;\n}\n{\nchar * data = *dataPtr2;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_char_32;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_char_32\n{\nvoid norm()\n{\nchar * data;\nchar * *dataPtr1 = &data;\nchar * *dataPtr2 = &data;\ndata = NULL;\n{\nchar * data = *dataPtr1;\ndata = new char;\n*data = 'A';\nprintHexCharLine(*data);\n*dataPtr1 = data;\n}\n{\nchar * data = *dataPtr2;\n\n;\n}\n}\n}\nusing namespace FUNC_new_char_32;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_char_44\n{\nstatic void normG2BSink(char * data)\n{\n;\n}\nstatic void normG2B()\n{\nchar * data;\nvoid (*funcPtr) (char *) = normG2BSink;\ndata = NULL;\nchar datanormBuffer;\ndata = &datanormBuffer;\n*data = 'A';\nprintHexCharLine(*data);\nfuncPtr(data);\n}\nstatic void normB2GSink(char * data)\n{\ndelete data;\n}\n}\nusing namespace CWE401_Memory_Leak__new_char_44;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_char_44\n{\nstatic void normSink(char * data)\n{\n\n;\n}\nvoid norm()\n{\nchar * data;\nvoid (*funcPtr) (char *) = normSink;\ndata = NULL;\ndata = new char;\n*data = 'A';\nprintHexCharLine(*data);\nfuncPtr(data);\n}\n}\nusing namespace FUNC_new_char_44;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nnamespace CWE401_Memory_Leak__new_int_06\n{\nstatic void normB2G1()\n{\nint * data;\ndata = NULL;\nif(STATIC_CONST_FIVE==5)\n{\ndata = new int;\n*data = 5;\nprintIntLine(*data);\n}\nif(STATIC_CONST_FIVE!=5)\n{\n}\nelse\n{\ndelete data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_int_06;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic const int STATIC_CONST_FIVE = 5;\nnamespace FUNC_new_int_06\n{\nvoid norm()\n{\nint * data;\ndata = NULL;\nif(STATIC_CONST_FIVE==5)\n{\ndata = new int;\n*data = 5;\nprintIntLine(*data);\n}\nif(STATIC_CONST_FIVE==5)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_int_06;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_int_10\n{\nstatic void normB2G1()\n{\nint * data;\ndata = NULL;\nif(globalTrue)\n{\ndata = new int;\n*data = 5;\nprintIntLine(*data);\n}\nif(globalFalse)\n{\n}\nelse\n{\ndelete data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_int_10;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_int_10\n{\nvoid norm()\n{\nint * data;\ndata = NULL;\nif(globalTrue)\n{\ndata = new int;\n*data = 5;\nprintIntLine(*data);\n}\nif(globalTrue)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_int_10;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_int64_t_21\n{\nstatic int normB2G1Static = 0;\nstatic int normB2G2Static = 0;\nstatic int normG2bStatic = 0;\nstatic void normB2G1Sink(int64_t * data)\n{\nif(normB2G1Static)\n{\n}\nelse\n{\ndelete data;\n}\n}\nstatic void normB2G1()\n{\nint64_t * data;\ndata = NULL;\ndata = new int64_t;\n*data = 5LL;\nprintLongLongLine(*data);\nnormB2G1Static = 0;\nnormB2G1Sink(data);\n}\nstatic void normB2G2Sink(int64_t * data)\n{\nif(normB2G2Static)\n{\ndelete data;\n}\n}\nstatic void normG2BSink(int64_t * data)\n{\nif(normG2bStatic)\n{\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_int64_t_21;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_int64_t_21\n{\nstatic int normStatic = 0;\nstatic void normSink(int64_t * data)\n{\nif(normStatic)\n{\n\n;\n}\n}\nvoid norm()\n{\nint64_t * data;\ndata = NULL;\ndata = new int64_t;\n*data = 5LL;\nprintLongLongLine(*data);\nnormStatic = 1;\nnormSink(data);\n}\n}\nusing namespace FUNC_new_int64_t_21;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticTrue = 1;\nstatic int staticFalse = 0;\nnamespace CWE401_Memory_Leak__new_struct_twoIntsStruct_05\n{\nstatic void normB2G1()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\nif(staticTrue)\n{\ndata = new struct _twoIntsStruct;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine((twoIntsStruct *)data);\n}\nif(staticFalse)\n{\n}\nelse\n{\ndelete data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_struct_twoIntsStruct_05;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticTrue = 1;\nstatic int staticFalse = 0;\nnamespace FUNC_new_struct_twoIntsStruct_05\n{\nvoid norm()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\nif(staticTrue)\n{\ndata = new struct _twoIntsStruct;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine((twoIntsStruct *)data);\n}\nif(staticTrue)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_struct_twoIntsStruct_05;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_struct_twoIntsStruct_44\n{\nstatic void normG2BSink(struct _twoIntsStruct * data)\n{\n;\n}\nstatic void normG2B()\n{\nstruct _twoIntsStruct * data;\nvoid (*funcPtr) (struct _twoIntsStruct *) = normG2BSink;\ndata = NULL;\nstruct _twoIntsStruct datanormBuffer;\ndata = &datanormBuffer;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine((twoIntsStruct *)data);\nfuncPtr(data);\n}\nstatic void normB2GSink(struct _twoIntsStruct * data)\n{\ndelete data;\n}\n}\nusing namespace CWE401_Memory_Leak__new_struct_twoIntsStruct_44;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_struct_twoIntsStruct_44\n{\nstatic void normSink(struct _twoIntsStruct * data)\n{\n\n;\n}\nvoid norm()\n{\nstruct _twoIntsStruct * data;\nvoid (*funcPtr) (struct _twoIntsStruct *) = normSink;\ndata = NULL;\ndata = new struct _twoIntsStruct;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine((twoIntsStruct *)data);\nfuncPtr(data);\n}\n}\nusing namespace FUNC_new_struct_twoIntsStruct_44;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_TwoIntsClass_01\n{\nstatic void normG2B()\n{\nTwoIntsClass * data;\ndata = NULL;\nTwoIntsClass datanormBuffer;\ndata = &datanormBuffer;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintIntLine(data->intOne);\nprintIntLine(data->intTwo);\n;\n}\n}\nusing namespace CWE401_Memory_Leak__new_TwoIntsClass_01;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_TwoIntsClass_01\n{\nvoid norm()\n{\nTwoIntsClass * data;\ndata = NULL;\ndata = new TwoIntsClass;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintIntLine(data->intOne);\nprintIntLine(data->intTwo);\n\n;\n}\n}\nusing namespace FUNC_new_TwoIntsClass_01;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticTrue = 1;\nstatic int staticFalse = 0;\nnamespace CWE401_Memory_Leak__new_TwoIntsClass_05\n{\nstatic void normB2G1()\n{\nTwoIntsClass * data;\ndata = NULL;\nif(staticTrue)\n{\ndata = new TwoIntsClass;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintIntLine(data->intOne);\nprintIntLine(data->intTwo);\n}\nif(staticFalse)\n{\n}\nelse\n{\ndelete data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_TwoIntsClass_05;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticTrue = 1;\nstatic int staticFalse = 0;\nnamespace FUNC_new_TwoIntsClass_05\n{\nvoid norm()\n{\nTwoIntsClass * data;\ndata = NULL;\nif(staticTrue)\n{\ndata = new TwoIntsClass;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintIntLine(data->intOne);\nprintIntLine(data->intTwo);\n}\nif(staticTrue)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_TwoIntsClass_05;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_twoIntsStruct_14\n{\nstatic void normB2G1()\n{\ntwoIntsStruct * data;\ndata = NULL;\nif(globalFive==5)\n{\ndata = new twoIntsStruct;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine(data);\n}\nif(globalFive!=5)\n{\n}\nelse\n{\ndelete data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_twoIntsStruct_14;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_twoIntsStruct_14\n{\nvoid norm()\n{\ntwoIntsStruct * data;\ndata = NULL;\nif(globalFive==5)\n{\ndata = new twoIntsStruct;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine(data);\n}\nif(globalFive==5)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_twoIntsStruct_14;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_twoIntsStruct_31\n{\nstatic void normG2B()\n{\ntwoIntsStruct * data;\ndata = NULL;\ntwoIntsStruct datanormBuffer;\ndata = &datanormBuffer;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine(data);\n{\ntwoIntsStruct * dataCopy = data;\ntwoIntsStruct * data = dataCopy;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_twoIntsStruct_31;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_twoIntsStruct_31\n{\nvoid norm()\n{\ntwoIntsStruct * data;\ndata = NULL;\ndata = new twoIntsStruct;\ndata->intOne = 0;\ndata->intTwo = 0;\nprintStructLine(data);\n{\ntwoIntsStruct * dataCopy = data;\ntwoIntsStruct * data = dataCopy;\n\n;\n}\n}\n}\nusing namespace FUNC_new_twoIntsStruct_31;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticReturnsTrue()\n{\nreturn 1;\n}\nstatic int staticReturnsFalse()\n{\nreturn 0;\n}\nnamespace CWE401_Memory_Leak__new_wchar_t_08\n{\nstatic void normB2G1()\n{\nwchar_t * data;\ndata = NULL;\nif(staticReturnsTrue())\n{\ndata = new wchar_t;\n*data = L'A';\nprintHexCharLine((char)*data);\n}\nif(staticReturnsFalse())\n{\n}\nelse\n{\ndelete data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_wchar_t_08;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticReturnsTrue()\n{\nreturn 1;\n}\nstatic int staticReturnsFalse()\n{\nreturn 0;\n}\nnamespace FUNC_new_wchar_t_08\n{\nvoid norm()\n{\nwchar_t * data;\ndata = NULL;\nif(staticReturnsTrue())\n{\ndata = new wchar_t;\n*data = L'A';\nprintHexCharLine((char)*data);\n}\nif(staticReturnsTrue())\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_wchar_t_08;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_wchar_t_09\n{\nstatic void normB2G1()\n{\nwchar_t * data;\ndata = NULL;\nif(GLOBAL_CONST_TRUE)\n{\ndata = new wchar_t;\n*data = L'A';\nprintHexCharLine((char)*data);\n}\nif(GLOBAL_CONST_FALSE)\n{\n}\nelse\n{\ndelete data;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__new_wchar_t_09;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_wchar_t_09\n{\nvoid norm()\n{\nwchar_t * data;\ndata = NULL;\nif(GLOBAL_CONST_TRUE)\n{\ndata = new wchar_t;\n*data = L'A';\nprintHexCharLine((char)*data);\n}\nif(GLOBAL_CONST_TRUE)\n{\n\n;\n}\n}\n}\nusing namespace FUNC_new_wchar_t_09;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__new_wchar_t_41\n{\nstatic void normG2BSink(wchar_t * data)\n{\n;\n}\nstatic void normG2B()\n{\nwchar_t * data;\ndata = NULL;\nwchar_t datanormBuffer;\ndata = &datanormBuffer;\n*data = L'A';\nprintHexCharLine((char)*data);\nnormG2BSink(data);\n}\nstatic void normB2GSink(wchar_t * data)\n{\ndelete data;\n}\n}\nusing namespace CWE401_Memory_Leak__new_wchar_t_41;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_new_wchar_t_41\n{\nstatic void normSink(wchar_t * data)\n{\n\n;\n}\nvoid norm()\n{\nwchar_t * data;\ndata = NULL;\ndata = new wchar_t;\n*data = L'A';\nprintHexCharLine((char)*data);\nnormSink(data);\n}\n}\nusing namespace FUNC_new_wchar_t_41;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normG2B()\n{\nchar * data;\ndata = NULL;\ndata = (char *)ALLOCA(100*sizeof(char));\nstrcpy(data, \"a string\");\nprintLine(data);\n{\nchar * dataCopy = data;\nchar * data = dataCopy;\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_strdup_char_31_norm()\n{\nchar * data;\ndata = NULL;\n{\nchar myString[] = \"myString\";\ndata = strdup(myString);\nprintLine(data);\n}\n{\nchar * dataCopy = data;\nchar * data = dataCopy;\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_strdup_char_31_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticReturnsTrue()\n{\nreturn 1;\n}\nstatic int staticReturnsFalse()\n{\nreturn 0;\n}\nstatic void normB2G1()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\nif(staticReturnsTrue())\n{\ndata = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\n}\nif(staticReturnsFalse())\n{\n}\nelse\n{\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic int staticReturnsTrue()\n{\nreturn 1;\n}\nstatic int staticReturnsFalse()\n{\nreturn 0;\n}\nvoid FUNC_struct_twoIntsStruct_malloc_08_norm()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\nif(staticReturnsTrue())\n{\ndata = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\n}\nif(staticReturnsTrue())\n{\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_struct_twoIntsStruct_malloc_08_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic struct _twoIntsStruct * normG2BSource(struct _twoIntsStruct * data)\n{\ndata = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\nreturn data;\n}\nstatic struct _twoIntsStruct * normB2GSource(struct _twoIntsStruct * data)\n{\ndata = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\nreturn data;\n}\nstatic void normB2G()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\ndata = normB2GSource(data);\nfree(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic struct _twoIntsStruct * normSource(struct _twoIntsStruct * data)\n{\ndata = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\nreturn data;\n}\nvoid FUNC_struct_twoIntsStruct_malloc_42_norm()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\ndata = normSource(data);\n\n;\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_struct_twoIntsStruct_malloc_42_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__struct_twoIntsStruct_realloc_33\n{\nstatic void normG2B()\n{\nstruct _twoIntsStruct * data;\nstruct _twoIntsStruct * &dataRef = data;\ndata = NULL;\ndata = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\n{\nstruct _twoIntsStruct * data = dataRef;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__struct_twoIntsStruct_realloc_33;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_struct_twoIntsStruct_realloc_33\n{\nvoid norm()\n{\nstruct _twoIntsStruct * data;\nstruct _twoIntsStruct * &dataRef = data;\ndata = NULL;\ndata = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\n{\nstruct _twoIntsStruct * data = dataRef;\n\n;\n}\n}\n}\nusing namespace FUNC_struct_twoIntsStruct_realloc_33;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic struct _twoIntsStruct * normG2BSource(struct _twoIntsStruct * data)\n{\ndata = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\nreturn data;\n}\nstatic struct _twoIntsStruct * normB2GSource(struct _twoIntsStruct * data)\n{\ndata = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\nreturn data;\n}\nstatic void normB2G()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\ndata = normB2GSource(data);\nfree(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic struct _twoIntsStruct * normSource(struct _twoIntsStruct * data)\n{\ndata = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine((twoIntsStruct *)&data[0]);\nreturn data;\n}\nvoid FUNC_struct_twoIntsStruct_realloc_42_norm()\n{\nstruct _twoIntsStruct * data;\ndata = NULL;\ndata = normSource(data);\n\n;\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_struct_twoIntsStruct_realloc_42_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normG2BSink(twoIntsStruct * data)\n{\n;\n}\nstatic void normB2GSink(twoIntsStruct * data)\n{\nfree(data);\n}\nstatic void normB2G()\n{\ntwoIntsStruct * data;\ndata = NULL;\ndata = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\nnormB2GSink(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normSink(twoIntsStruct * data)\n{\n\n;\n}\nvoid FUNC_twoIntsStruct_calloc_41_norm()\n{\ntwoIntsStruct * data;\ndata = NULL;\ndata = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\nnormSink(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_twoIntsStruct_calloc_41_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normB2G()\n{\ntwoIntsStruct * data;\ndata = NULL;\ngoto source;\nsource:\ndata = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\ngoto sink;\nsink:\nfree(data);\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_twoIntsStruct_malloc_18_norm()\n{\ntwoIntsStruct * data;\ndata = NULL;\ngoto source;\nsource:\ndata = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\ngoto sink;\nsink:\n\n;\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_twoIntsStruct_malloc_18_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normG2B()\n{\ntwoIntsStruct * data;\ntwoIntsStruct * *dataPtr1 = &data;\ntwoIntsStruct * *dataPtr2 = &data;\ndata = NULL;\n{\ntwoIntsStruct * data = *dataPtr1;\ndata = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\n*dataPtr1 = data;\n}\n{\ntwoIntsStruct * data = *dataPtr2;\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_twoIntsStruct_malloc_32_norm()\n{\ntwoIntsStruct * data;\ntwoIntsStruct * *dataPtr1 = &data;\ntwoIntsStruct * *dataPtr2 = &data;\ndata = NULL;\n{\ntwoIntsStruct * data = *dataPtr1;\ndata = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\n*dataPtr1 = data;\n}\n{\ntwoIntsStruct * data = *dataPtr2;\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_twoIntsStruct_malloc_32_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\ntypedef union\n{\ntwoIntsStruct * unionFirst;\ntwoIntsStruct * unionSecond;\n} CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType;\nstatic void normG2B()\n{\ntwoIntsStruct * data;\nCWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;\ndata = NULL;\ndata = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\nmyUnion.unionFirst = data;\n{\ntwoIntsStruct * data = myUnion.unionSecond;\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\ntypedef union\n{\ntwoIntsStruct * unionFirst;\ntwoIntsStruct * unionSecond;\n} FUNC_twoIntsStruct_malloc_34_unionType;\nvoid FUNC_twoIntsStruct_malloc_34_norm()\n{\ntwoIntsStruct * data;\nFUNC_twoIntsStruct_malloc_34_unionType myUnion;\ndata = NULL;\ndata = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\nif (data == NULL) {exit(-1);}\ndata[0].intOne = 0;\ndata[0].intTwo = 0;\nprintStructLine(&data[0]);\nmyUnion.unionFirst = data;\n{\ntwoIntsStruct * data = myUnion.unionSecond;\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_twoIntsStruct_malloc_34_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normG2B()\n{\nwchar_t * data;\ndata = NULL;\ndata = (wchar_t *)ALLOCA(100*sizeof(wchar_t));\nwcscpy(data, L\"A String\");\nprintWLine(data);\n;\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_wchar_t_malloc_01_norm()\n{\nwchar_t * data;\ndata = NULL;\ndata = (wchar_t *)malloc(100*sizeof(wchar_t));\nif (data == NULL) {exit(-1);}\nwcscpy(data, L\"A String\");\nprintWLine(data);\n\n;\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_wchar_t_malloc_01_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nstatic void normB2G1()\n{\nwchar_t * data;\ndata = NULL;\nif(globalTrue)\n{\ndata = (wchar_t *)malloc(100*sizeof(wchar_t));\nif (data == NULL) {exit(-1);}\nwcscpy(data, L\"A String\");\nprintWLine(data);\n}\nif(globalFalse)\n{\n}\nelse\n{\nfree(data);\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormB2G1();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nvoid FUNC_wchar_t_malloc_10_norm()\n{\nwchar_t * data;\ndata = NULL;\nif(globalTrue)\n{\ndata = (wchar_t *)malloc(100*sizeof(wchar_t));\nif (data == NULL) {exit(-1);}\nwcscpy(data, L\"A String\");\nprintWLine(data);\n}\nif(globalTrue)\n{\n\n;\n}\n}\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nFUNC_wchar_t_malloc_10_norm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace CWE401_Memory_Leak__wchar_t_realloc_33\n{\nstatic void normG2B()\n{\nwchar_t * data;\nwchar_t * &dataRef = data;\ndata = NULL;\ndata = (wchar_t *)ALLOCA(100*sizeof(wchar_t));\nwcscpy(data, L\"A String\");\nprintWLine(data);\n{\nwchar_t * data = dataRef;\n;\n}\n}\n}\nusing namespace CWE401_Memory_Leak__wchar_t_realloc_33;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnormG2B();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include \"std_testcase.h\"\n#include <wchar.h>\nnamespace FUNC_wchar_t_realloc_33\n{\nvoid norm()\n{\nwchar_t * data;\nwchar_t * &dataRef = data;\ndata = NULL;\ndata = (wchar_t *)realloc(data, 100*sizeof(wchar_t));\nif (data == NULL) {exit(-1);}\nwcscpy(data, L\"A String\");\nprintWLine(data);\n{\nwchar_t * data = dataRef;\n\n;\n}\n}\n}\nusing namespace FUNC_wchar_t_realloc_33;\nint main(int argc, char * argv[])\n{\nsrand( (unsigned)time(NULL) );\nnorm();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint * p = NULL;\nint size;\n\nsize = 10;\n\np = (int *)malloc(size * sizeof(int));\n\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint * p = (int *)malloc(sizeof(int));\n\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nchar * p = NULL;\nint size = 10;\n\np = (char *)malloc(size * sizeof(char));\n\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nchar * p = (char *)malloc(sizeof(char));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint * p = NULL;\n\np = (int *)malloc(2 * sizeof(int));\n\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint * p = (int *)malloc(2 * sizeof(char));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct testStruct_1 {\nchar a;\nshort b;\nint c;\n};\n\n\nvoid foo(void)\n{\nstruct testStruct_1 * p = NULL;\np = (struct testStruct_1 *)malloc(sizeof(struct testStruct_1));\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct testStruct_1 {\nchar a;\nshort b;\nint c;\n};\n\nvoid foo(void)\n{\nstruct testStruct_1 * p;\np = malloc(sizeof(struct testStruct_1 *));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct testStruct_1 {\nchar a;\nshort b;\nint c;\n};\n\nvoid foo(void)\n{\nstruct testStruct_1 * p = NULL;\np = (struct testStruct_1 *)malloc(sizeof(struct testStruct_1));\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct testStruct_1 {\nchar a;\nshort b;\nint c;\n};\n\nvoid foo(void)\n{\nstruct testStruct_1 * p;\n\np = (struct testStruct_1 *)malloc(sizeof(int));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct testStruct_1 {\nchar a;\nshort b;\nint c;\n};\n\nvoid foo(void)\n{\nstruct testStruct_1 * p = NULL;\np = (struct testStruct_1 *)malloc(sizeof(struct testStruct_1));\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct testStruct_1 {\nchar a;\nshort b;\nint c;\n};\n\nvoid foo(void)\n{\nstruct testStruct_1 * p;\n\np = (struct testStruct_1 *)malloc(sizeof(8 * char));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct testStruct_2 {\nint a;\n};\n\nstruct node {\nstruct node * next;\nstruct node * pre;\nstruct testStruct_2 * p;\n};\n\nvoid foo(void)\n{\nstruct node * p = NULL;\np = (struct node *)malloc(sizeof(struct node));\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct testStruct_2 {\nint a;\n};\n\nstruct node {\nstruct node * next;\nstruct node * pre;\nstruct testStruct_2 * p;\n};\n\nvoid foo(void)\n{\nstruct node * p;\np = malloc(sizeof(struct testStruct_2));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct testStruct_2 {\nint a;\n};\n\nstruct node {\nstruct node * next;\nstruct node * pre;\nstruct testStruct_2 * p;\n};\n\nvoid foo(void)\n{\nstruct node * p = NULL;\np = (struct node *)malloc(sizeof(struct node));\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct testStruct_2 {\nint a;\n};\n\nstruct node {\nstruct node * next;\nstruct node * pre;\nstruct testStruct_2 * p;\n};\n\nvoid foo(void)\n{\nstruct node * p;\np = malloc(sizeof(struct node *));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct testStruct_2 {\nint a;\n};\n\nstruct node {\nstruct node * next;\nstruct node * pre;\nstruct testStruct_2 * p;\n};\n\nvoid foo(void)\n{\nstruct node * p = NULL;\np = (struct node *)malloc(sizeof(struct node));\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct testStruct_2 {\nint a;\n};\n\nstruct node {\nstruct node * next;\nstruct node * pre;\nstruct testStruct_2 * p;\n};\n\nvoid foo(void)\n{\nstruct node * p;\np = malloc(sizeof(4 * int));\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\n\nfor(i = 0; i < 10; i++)\n{\nint * p = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\nint * p;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\n}\nfree(p);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\n\nfor(i = 0; i < 10; i++)\n{\nint * p = malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\n}\nfree(p);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\nint * p = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\n\nfor(i = 0; i < 10; i++)\n{\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\n}\n\nfor(i = 0; i < 10; i++)\n{\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 5; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n{\nfree(p);\nfree(p);\n}\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\n}\n\nfor(i = 0; i < 5; i++)\n{\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 5; i++)\n{\np = (int *)malloc(sizeof(int));\n}\n\nfor(i = 0; i < 10; i++)\n{\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint * ptr1 = NULL;\nint * ptr2 = NULL;\n\nptr1 = (int*)malloc(sizeof(int));\nif(ptr1 != NULL)\nfree(ptr1);\n\nptr2 = (int*)malloc(sizeof(int));\nif(ptr2 != NULL)\nfree(ptr2);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint* ptr = (int*)malloc(sizeof(int));\n\nint* ptr = (int*)malloc(sizeof(int));\nfree(ptr);\nfree(ptr);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint * ptr = NULL;\n\nptr = (int*)malloc(sizeof(int));\nif(ptr != NULL)\n{\n*ptr = 10;\nfree(ptr);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint* ptr = (int*)malloc(sizeof(int));\nfree(ptr);\n\n*ptr = 10;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint* ptr = (int*)malloc(sizeof(int) * 10);\n\nptr[8] = 10;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint* ptr = (int*)malloc(sizeof(int) * 10);\nptr[10] = 10;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint a[10];\nint* ptr = a;\nptr++;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint a = 10;\nint* ptr = &a;\nptr++;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint* ptr;\nint a;\n\nptr = &a;\n*ptr = 10;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint* ptr;\n*ptr = 10;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(void)\n{\nint* ptr = (int*)malloc(sizeof(int * 3));\nint* new_ptr = ptr + 1;\nfree(ptr);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(void)\n{\nint* ptr = (int*)malloc(sizeof(int));\nfree(ptr);\nint* new_ptr = ptr + 1;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int * foo(void)\n{\nint* ptr = malloc(sizeof(int));\n*ptr = 10;\nreturn ptr;\n}\n\nvoid test(void)\n{\nint * p = foo();\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int * foo(void)\n{\nint a = 10;\nint* ptr = &a;\nreturn ptr;\n}\n\nvoid test(void)\n{\nint * p = foo();\nif(p != NULL)\nfree(p);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int * foo(void)\n{\nwhile (true) {\nint* ptr = (int*)malloc(sizeof(int));\nif(ptr != NULL)\nfree(ptr);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int * foo(void)\n{\nwhile (true) {\nint* ptr = (int*)malloc(sizeof(int));\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "typedef struct {\nint* ptr;\n} my_struct;\n\nint * foo(void)\n{\nmy_struct s;\ns.ptr = (int*)malloc(sizeof(int));\nif(s.ptr != NULL)\n{\n*s.ptr = 10;\nfree(s.ptr);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "typedef struct {\nint* ptr;\n} my_struct;\n\nint * foo(void)\n{\nmy_struct s;\n*s.ptr = 10;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "typedef struct {\nint * b;\n} my_struct;\n\n\nint * foo(void)\n{\nmy_struct * a;\na = (my_struct *)malloc(sizeof(my_struct));\nif(a != NULL)\na->b = (int *)malloc(sizeof(int));\n\nfree(a->b);\nfree(a);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "typedef struct {\nint * b;\n} my_struct;\n\n\nint * foo(void)\n{\nmy_struct * a;\na = (my_struct *)malloc(sizeof(my_struct));\nif(a != NULL)\na->b = (int *)malloc(sizeof(int));\n\nfree(a);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int * foo(void)\n{\nreturn (int *) malloc(10);\n}\n\nvoid test(void)\n{\nint * a = foo();\nif(a != NULL)\nfree(a);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int * foo(void)\n{\nreturn (int *) malloc(10);\n}\n\nvoid test(void)\n{\nfoo();\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct student\n{\nchar *name;\nint score;\n}stu;\n\nint * foo(void)\n{\nchar a[16];\nstu.name = a;\n\nstrcpy(stu.name, \"code\");\nstu.score = 99;\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct student\n{\nchar *name;\nint score;\n}stu;\n\nint * foo(void)\n{\nstrcpy(stu.name, \"code\");\nstu.score = 99;\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct student\n{\nchar *name;\nint score;\n};\n\nint * foo(void)\n{\nstruct student * pstu = (struct student *)malloc(sizeof(struct student));\nchar a[16];\npstu->name = a;\n\nstrcpy(pstu->name, \"code\");\npstu->score = 99;\nfree(pstu);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct student\n{\nchar *name;\nint score;\n};\n\nint * foo(void)\n{\nstruct student * pstu = (struct student *)malloc(sizeof(struct student));\nstrcpy(pstu->name, \"code\");\npstu->score = 99;\nfree(pstu);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct student\n{\nchar *name;\nint score;\n};\n\n\nint * foo(void)\n{\nstruct student * pstu = (struct student *)malloc(sizeof(struct student));\nchar a[16];\npstu->name = a;\n\nstrcpy(pstu->name, \"code\");\npstu->score = 99;\nfree(pstu);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "struct student\n{\nchar *name;\nint score;\n};\n\nint * foo(void)\n{\nstruct student * pstu = NULL;\npstu = (struct student *)malloc(sizeof(struct student *));\nstrcpy(pstu->name, \"code\");\npstu->score = 99;\nfree(pstu);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int * foo(void)\n{\nint a[10] = {0};\nfor (i=0; i<10; i++)\n{\na[i] = i;\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int * foo(void)\n{\nint a[10] = {0};\nfor (i=0; i<=10; i++)\n{\na[i] = i;\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int * foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int * foo(void)\n{\nint i,j;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\n}\n\nfor(j = 0; j < 10; j++)\n{\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int * foo(void)\n{\nint i;\nint * p[10] = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np[i] = (int *)malloc(sizeof(int));\n}\n\nfor(i = 0; i < 10; i++)\n{\nfree(p[i]);\n}\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int * foo(void)\n{\nint i,j;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\n}\n\nfor(i = 0; i < 10; i++)\n{\nfree(p);\n}\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(char *explanation)\n{\nchar *p1;\np1 = (char *)malloc(100);\nsprintf(p1,\"The f1 error occurred because of '%s'.\", explanation);\nfree(p1);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(char *explanation)\n{\nchar *p1;\np1 = (char *)malloc(100);\nsprintf(p1,\"The f1 error occurred because of '%s'.\", explanation);\nlocal_log(p1);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int foo(char *filename)\n{\nFILE *fp;\nint key;\nfp = fopen(filename, \"r\");\nfscanf(fp, \"%d\", &key);\nfclose(fp);\nreturn key;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int foo(char *filename)\n{\nFILE *fp;\nint key;\nfp = fopen(filename, \"r\");\nfscanf(fp, \"%d\", &key);\nreturn key;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo(int datum)\n{\nint *p2;\nint a;\n\np2 = &a;\n*p2 = datum;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo(int datum)\n{\nint *p2;\n*p2 = datum;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo1()\n{\nchar *p, *pp;\np = malloc(10);\npp=p;\nfree(p);\n}\n\nvoid foo2()\n{\nchar *p = NULL;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo1()\n{\nchar *p, *pp;\np = malloc(10);\npp=p;\nfree(p);\nfree(pp);\n}\n\nvoid foo2()\n{\nchar *p;\nfree(p);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int foo()\n{\nstruct x *xp;\nxp = (struct x *) malloc(sizeof (struct x));\nxp.q = 13;\n\nint a = xp.q;\nfree(xp)\nreturn a;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int foo()\n{\nstruct x *xp;\nxp = (struct x *) malloc(sizeof (struct x));\nxp.q = 13;\nfree(xp);\nreturn xp.q;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo2 (int * a)\n{\nfree(a);\n}\n\nvoid foo1 (int * a)\n{\nfoo2(a);\n}\n\nvoid foo()\n{\nint * a;\na = (int *) malloc(sizeof (int));\nfoo1(a);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo2 (int * a)\n{\nint * b;\nfree(b);\n}\n\nvoid foo1 (int * a)\n{\nint * b;\nb = a;\nfoo2(b);\n}\n\nvoid foo()\n{\nint * a;\na = (int *) malloc(sizeof (int));\nfoo1(a);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo()\n{\nint * a;\nint b;\na = &b;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo()\n{\nint * a;\nint b;\na = b;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo()\n{\nint * a;\nint c[10];\na = c;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo()\n{\nint * a;\nint c;\na = c;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo()\n{\nint ** a;\nint c[10];\na = &c;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo()\n{\nint * a;\nint c[10];\na = &c;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo()\n{\nint * a;\nint c[10];\n\na = c;\na + 5 = 10;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo()\n{\nint * a;\nint c[10];\n\na = c;\na + 11 = 10;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo()\n{\nint c[10];\nc[9] = 10;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo()\n{\nint c[10];\nc[10] = 10;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "int * a = NULL;\nvoid foo()\n{\na = (int *)malloc(sizeof(int));\nif(a != NULL)\nfree(a);\na = NULL;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "int * a = NULL;\nvoid foo()\n{\na = (int *)malloc(sizeof(int));\nif(a != NULL)\nfree(a);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "void foo1()\n{\n*a += 1;\n}\n\nvoid foo2(int * a)\n{\n*a = 10;\nfoo1(a);\n}\n\nvoid foo3(int * a)\n{\nint * a = (int *)malloc(sizeof(int));\nif(a != NULL)\nfoo2(a);\nfree(a);\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "void foo1()\n{\n*a += 1;\n}\n\nvoid foo2(int * a)\n{\n*a = 10;\nfoo1(a);\n}\n\nvoid foo3(int * a)\n{\nint * a = (int *)malloc(sizeof(int));\nif (a != NULL)\nfoo2(a);\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* create_string() {\nchar *str = (char*)malloc(sizeof(char) * 100);\nreturn str;\n}\n\nint main() {\nchar *myStr = create_string();\nfree(myStr);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* create_string() {\nchar *str = (char*)malloc(sizeof(char) * 100);\nreturn str;\n}\n\nint main() {\nchar *myStr = create_string();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nif (ptr == NULL) {\nreturn;\n}\nif (some_condition) {\nfree(ptr);\nreturn;\n}\nfree(ptr);\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nif (ptr == NULL) {\nreturn;\n}\nif (some_condition) return;\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __in_loop() {\nfor (int i = 0; i < 10; i++) {\nint *ptr = (int*)malloc(sizeof(int));\nfree(ptr);\n}\n}\n\nint main() {\n__in_loop();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _in_loop() {\nfor (int i = 0; i < 10; i++) {\nint *ptr = (int*)malloc(sizeof(int));\n}\n}\n\nint main() {\n_in_loop();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _realloc_() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nint *temp = (int*)realloc(ptr, sizeof(int) * 20);\nif (temp == NULL) {\nfree(ptr);\nreturn;\n}\nptr = temp;\nfree(ptr);\n}\n\nint main() {\n_realloc_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid realloc_() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nptr = (int*)realloc(ptr, sizeof(int) * 20);\n}\n\nint main() {\nrealloc_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __function() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__function();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _function() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_function();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nint *global_ptr;\n\nvoid setup() {\nglobal_ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nvoid teardown() {\nfree(global_ptr);\n}\n\nint main() {\nsetup();\nteardown();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nint *global_ptr;\n\nvoid setup() {\nglobal_ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nvoid teardown() {\n}\n\nint main() {\nsetup();\nteardown();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(11 * sizeof(int));\nif (arr != NULL) {\narr[10] = 5;\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(10 * sizeof(int));\narr[10] = 5;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(6 * sizeof(int));\nif (arr != NULL) {\nfor (int i = 0; i < 6; i++) {\narr[i] = i;\n}\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(5 * sizeof(int));\nfor (int i = 0; i <= 5; i++) {\narr[i] = i;\n}\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(12 * sizeof(int));\nif (arr != NULL) {\narr[11] = 100;\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(10 * sizeof(int));\narr[11] = 100;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid safe_memory() {\nint n = 10;\nint *arr = (int*)malloc((n + 1) * sizeof(int));\nif (arr != NULL) {\narr[n] = 20;\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid _memory() {\nint n = 10;\nint *arr = (int*)malloc(n * sizeof(int));\narr[n] = 20;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(6 * sizeof(int));\nif (arr != NULL) {\nint index = 6;\nif (index - 1 < 6) {\narr[index - 1] = 50;\n}\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(5 * sizeof(int));\nint index = 6;\narr[index - 1] = 50;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid _memory_() {\nint *ptr = (int*)malloc(sizeof(int));\nif (ptr != NULL) {\n*ptr = 10;\nfree(ptr);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid memory_() {\nint *ptr = (int*)malloc(sizeof(int));\n*ptr = 10;\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <string.h>\n\nvoid _memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nif (str != NULL) {\nstrcpy(str, \"Hello, World!\");\nfree(str);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <string.h>\n\nvoid memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid _memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nif (arr != NULL) {\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nfree(arr);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid _memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nif (head != NULL) {\nhead->data = 1;\nhead->next = NULL;\nfree(head);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nhead->data = 1;\nhead->next = NULL;\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid _memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nif (ptr_array != NULL) {\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\nif (ptr_array[i] != NULL) {\n*(ptr_array[i]) = i;\n}\n}\nfor (int i = 0; i < 5; i++) {\nfree(ptr_array[i]);\n}\nfree(ptr_array);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\n*(ptr_array[i]) = i;\n}\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid _memory_() {\nint *ptr = (int*)malloc(sizeof(int));\n*ptr = 10;\nint *new_ptr = (int*)malloc(sizeof(int));\n*new_ptr = 20;\nfree(new_ptr);\nfree(ptr);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid memory_() {\nint *ptr = (int*)malloc(sizeof(int));\n*ptr = 10;\nint *new_ptr = (int*)malloc(sizeof(int));\nptr = new_ptr;\n*new_ptr = 20;\nfree(ptr);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <string.h>\n\nvoid _memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\nchar *new_str = (char*)malloc(50 * sizeof(char));\nstrcpy(new_str, \"Goodbye!\");\nfree(new_str);\nfree(str);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <string.h>\n\nvoid memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\nchar *new_str = (char*)malloc(50 * sizeof(char));\nstr = new_str;\nstrcpy(new_str, \"Goodbye!\");\nfree(str);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid _memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nint *new_arr = (int*)malloc(5 * sizeof(int));\nfor (int i = 0; i < 5; i++) {\nnew_arr[i] = i * 2;\n}\nfree(new_arr);\nfree(arr);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nint *new_arr = (int*)malloc(5 * sizeof(int));\narr = new_arr;\nfor (int i = 0; i < 5; i++) {\nnew_arr[i] = i * 2;\n}\nfree(arr);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid _memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nhead->data = 1;\nhead->next = NULL;\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nnew_de->data = 2;\nnew_de->next = NULL;\nfree(new_de);\nfree(head);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nhead->data = 1;\nhead->next = NULL;\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nhead = new_de;\nnew_de->data = 2;\nnew_de->next = NULL;\nfree(head);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid _memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\n*(ptr_array[i]) = i;\n}\nint **new_ptr_array = (int**)malloc(3 * sizeof(int*));\nfor (int i = 0; i < 3; i++) {\nnew_ptr_array[i] = (int*)malloc(sizeof(int));\n*(new_ptr_array[i]) = i * 10;\n}\nfor (int i = 0; i < 5; i++) {\nfree(ptr_array[i]);\n}\nfree(ptr_array);\nfor (int i = 0; i < 3; i++) {\nfree(new_ptr_array[i]);\n}\nfree(new_ptr_array);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\n*(ptr_array[i]) = i;\n}\nint **new_ptr_array = (int**)malloc(3 * sizeof(int*));\nptr_array = new_ptr_array;\nfor (int i = 0; i < 3; i++) {\nnew_ptr_array[i] = (int*)malloc(sizeof(int));\n*(new_ptr_array[i]) = i * 10;\n}\nfor (int i = 0; i < 3; i++) {\nfree(new_ptr_array[i]);\n}\nfree(ptr_array);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nint *ptr = malloc(10 * sizeof(int));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nint *ptr = malloc(10 * sizeof(int));\nchar *charPtr = (char *)ptr;\nfree(charPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\ndouble *ptr = malloc(10 * sizeof(double));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\ndouble *ptr = malloc(10 * sizeof(double));\nint *intPtr = (int *)ptr;\nfree(intPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nchar *ptr = malloc(100 * sizeof(char));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nchar *ptr = malloc(100 * sizeof(char));\nvoid *voidPtr = ptr;\nfree((int *)voidPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nfloat *ptr = malloc(5 * sizeof(float));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nfloat *ptr = malloc(5 * sizeof(float));\nshort *shortPtr = (short *)ptr;\nfree(shortPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nlong *ptr = malloc(8 * sizeof(long));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nlong *ptr = malloc(8 * sizeof(long));\nunsigned long *ulongPtr = (unsigned long *)ptr;\nfree((void **)ulongPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid use_memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\nwhile(1) {\nuse_memory();\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\nwhile(1) {\n_memory();\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(100 * sizeof(char));\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nwhile(1) {\nchar *my_str = create_string();\nfree(my_str);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(100 * sizeof(char));\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nwhile(1) {\nchar *my_str = create_string();\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int size) {\nint *data = (int*)malloc(size * sizeof(int));\nfree(data);\n}\n\nint main() {\nfor(int i = 0; i < 1000; i++) {\nprocess_data(100);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int size) {\nint *data = (int*)malloc(size * sizeof(int));\n}\n\nint main() {\nfor(int i = 0; i < 1000; i++) {\nprocess_data(100);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_to_list(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nwhile(head != NULL) {\nstruct Node *temp = head;\nhead = head->next;\nfree(temp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor(int i = 0; i < 1000; i++) {\nadd_to_list(&head, i);\n}\nfree_list(head);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_to_list(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head = NULL;\nfor(int i = 0; i < 1000; i++) {\nadd_to_list(&head, i);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource = malloc(1024);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n}\n\nvoid free_resource(void *resource) {\nfree(resource);\n}\n\nint main() {\nwhile(1) {\nvoid *resource = create_resource();\nuse_resource(resource);\nfree_resource(resource);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource = malloc(1024);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n}\n\nint main() {\nwhile(1) {\nvoid *resource = create_resource();\nuse_resource(resource);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _() {\nchar *buffer = (char*)malloc(100);\nfree(buffer);\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\n_();\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid () {\nchar *buffer = (char*)malloc(100);\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\n();\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(50);\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nchar *my_str = create_string();\nfree(my_str);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(50);\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nchar *my_str = create_string();\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int *data, int size) {\n// 处理数据...\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nint *data = (int*)malloc(100 * sizeof(int));\nprocess_data(data, 100);\nfree(data);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int *data, int size) {\n// 处理数据...\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nint *data = (int*)malloc(100 * sizeof(int));\nprocess_data(data, 100);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nif (*head == NULL) {\n*head = new_de;\n} else {\nstruct Node *current = *head;\nwhile (current->next != NULL) {\ncurrent = current->next;\n}\ncurrent->next = new_de;\n}\n}\n\nvoid free_list(struct Node *head) {\nwhile (head != NULL) {\nstruct Node *temp = head;\nhead = head->next;\nfree(temp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor (int i = 0; i < 1000; i++) {\nappend_de(&head, i);\n}\nfree_list(head);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nif (*head == NULL) {\n*head = new_de;\n} else {\nstruct Node *current = *head;\nwhile (current->next != NULL) {\ncurrent = current->next;\n}\ncurrent->next = new_de;\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor (int i = 0; i < 1000; i++) {\nappend_de(&head, i);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *allocate_resource() {\nvoid *resource = malloc(256);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n// 使用资源...\n}\n\nvoid free_resource(void *resource) {\nfree(resource);\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nvoid *resource = allocate_resource();\nuse_resource(resource);\nfree_resource(resource);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *allocate_resource() {\nvoid *resource = malloc(256);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n// 使用资源...\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nvoid *resource = allocate_resource();\nuse_resource(resource);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid __memory() {\nchar *buffer = (char*)malloc(100);\nfree(buffer);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory() {\nchar *buffer;\nfree(buffer);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nwhile (head != NULL) {\nstruct Node *temp = head;\nhead = head->next;\nfree(temp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor (int i = 0; i < 10; i++) {\nappend_de(&head, i);\n}\nfree_list(head);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head;\nfor (int i = 0; i < 10; i++) {\nappend_de(&head, i);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data() {\nchar *buffer = (char*)malloc(100);\nif (buffer != NULL) {\nsprintf(buffer, \"Data\");\nfree(buffer);\n}\n}\n\nint main() {\nprocess_data();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data() {\nchar *buffer;\nsprintf(buffer, \"Data\");\n}\n\nint main() {\nprocess_data();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource = malloc(256);\nreturn resource;\n}\n\nvoid use_and_free_resource(void *resource) {\nif (resource != NULL) {\nfree(resource);\n}\n}\n\nint main() {\nvoid *resource = create_resource();\nuse_and_free_resource(resource);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource;\nreturn resource;\n}\n\nvoid use_and_free_resource(void *resource) {\nfree(resource);\n}\n\nint main() {\nvoid *resource = create_resource();\nuse_and_free_resource(resource);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Data {\nint *values;\nint size;\n};\n\nstruct Data *initialize_data(int size) {\nstruct Data *data = (struct Data*)malloc(sizeof(struct Data));\nif (data != NULL) {\ndata->values = (int*)malloc(size * sizeof(int));\nif (data->values != NULL) {\ndata->size = size;\nfor (int i = 0; i < size; i++) {\ndata->values[i] = i;\n}\n} else {\nfree(data);\ndata = NULL;\n}\n}\nreturn data;\n}\n\nvoid free_data(struct Data *data) {\nif (data != NULL) {\nif (data->values != NULL) {\nfree(data->values);\n}\nfree(data);\n}\n}\n\nint main() {\nstruct Data *my_data = initialize_data(10);\nif (my_data != NULL) {\nfree_data(my_data);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Data {\nint *values;\nint size;\n};\n\nstruct Data *initialize_data(int size) {\nstruct Data *data = (struct Data*)malloc(sizeof(struct Data));\ndata->size = size;\nfor (int i = 0; i < size; i++) {\ndata->values[i] = i;\n}\nreturn data;\n}\n\nint main() {\nstruct Data *my_data = initialize_data(10);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory_loop() {\nint *ptrs[10];\nfor (int i = 0; i < 10; i++) {\nptrs[i] = (int *)malloc(sizeof(int));\n}\nfor (int i = 0; i < 10; i++) {\nfree(ptrs[i]);\n}\n}\n\nint main() {\n__memory_loop();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory_loop() {\nfor (int i = 0; i < 10; i++) {\nint *ptr = (int *)malloc(sizeof(int));\n}\n}\n\nint main() {\n_memory_loop();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory_on_error() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nif (!ptr) {\nperror(\"malloc failed\");\nexit(EXIT_FAILURE);\n}\nif (1) {\nfree(ptr);\nperror(\"Simulated error\");\nexit(EXIT_FAILURE);\n}\nfree(ptr);\n}\n\nint main() {\n__memory_on_error();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory_on_error() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nif (!ptr) {\nperror(\"malloc failed\");\nexit(EXIT_FAILURE);\n}\nif (1) {\nperror(\"Simulated error\");\nexit(EXIT_FAILURE);\n}\n}\n\nint main() {\n_memory_on_error();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nint *__memory_return() {\nreturn (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\nint *ptr = __memory_return();\nfree(ptr);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nint *_memory_return() {\nreturn (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\nint *ptr = _memory_return();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray() {\nreturn (int*)malloc(sizeof(int) * 100);\n}\n\nint main() {\nint *arr = createArray();\nfree(arr);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray() {\nreturn (int*)malloc(sizeof(int) * 100);\n}\n\nint main() {\nint *arr = createArray();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* getString() {\nchar *str = (char*)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nchar *myStr = getString();\nprintf(\"%s\\n\", myStr);\nfree(myStr);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* getString() {\nchar *str = (char*)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nchar *myStr = getString();\nprintf(\"%s\\n\", myStr);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node* next;\n};\n\nstruct Node* createNode(int data) {\nstruct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\nnewNode->data = data;\nnewNode->next = NULL;\nreturn newNode;\n}\n\nvoid freeList(struct Node* head) {\nstruct Node* tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node* head = createNode(10);\nfreeList(head);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node* next;\n};\n\nstruct Node* createNode(int data) {\nstruct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\nnewNode->data = data;\nnewNode->next = NULL;\nreturn newNode;\n}\n\nint main() {\nstruct Node* head = createNode(10);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid processData() {\nint *dataArray = (int*)malloc(sizeof(int) * 5);\nfor (int i = 0; i < 5; i++) {\ndataArray[i] = i * 10;\n}\n// Process data...\nfree(dataArray);\n}\n\nint main() {\nprocessData();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid processData() {\nint *dataArray = (int*)malloc(sizeof(int) * 5);\nfor (int i = 0; i < 5; i++) {\ndataArray[i] = i * 10;\n}\n// Process data...\n}\n\nint main() {\nprocessData();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr = (int*)malloc(sizeof(int));\nif (ptr != NULL) {\n*ptr = 10;\nfree(ptr);\n}\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr;\n*ptr = 10;\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid copyString(char *dest, const char *src) {\nstrcpy(dest, src);\n}\n\nint main() {\nchar *myString = (char*)malloc(strlen(\"Hello, world!\") + 1);\nif (myString != NULL) {\ncopyString(myString, \"Hello, world!\");\nprintf(\"%s\\n\", myString);\nfree(myString);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid copyString(char *dest, const char *src) {\nstrcpy(dest, src);\n}\n\nint main() {\nchar *myString;\ncopyString(myString, \"Hello, world!\");\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid appendNode(struct Node **head, int data) {\nstruct Node *newNode = (struct Node*)malloc(sizeof(struct Node));\nif (newNode != NULL) {\nnewNode->data = data;\nnewNode->next = *head;\n*head = newNode;\n}\n}\n\nvoid freeList(struct Node *head) {\nstruct Node *tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nappendNode(&head, 10);\nfreeList(head);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid appendNode(struct Node **head, int data) {\nstruct Node *newNode;\nnewNode->data = data;\nnewNode->next = *head;\n*head = newNode;\n}\n\nint main() {\nstruct Node *head = NULL;\nappendNode(&head, 10);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid createArray() {\nint *arr = (int*)malloc(sizeof(int) * 10);\nif (arr != NULL) {\narr[0] = 1;\nfree(arr);\n}\n}\n\nint main() {\ncreateArray();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid createArray() {\nint *arr;\narr[0] = 1;\n}\n\nint main() {\ncreateArray();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid fillArray(int *arr, int size) {\nfor (int i = 0; i < size; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nint *myArray = (int*)malloc(sizeof(int) * 10);\nif (myArray != NULL) {\nfillArray(myArray, 10);\nfree(myArray);\n}\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid fillArray(int *arr, int size) {\nfor (int i = 0; i < size; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nint *myArray;\nfillArray(myArray, 10);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <string.h>\n\nvoid create_string() {\nchar *str = (char *)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\nfree(str);\n}\n\nint main() {\ncreate_string();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <string.h>\n\nvoid create_string() {\nchar *str = (char *)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\n}\n\nint main() {\ncreate_string();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nvoid allocate_memory() {\nint *arr = (int *)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nfree(arr);\n}\n\nint main() {\nallocate_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nvoid allocate_memory() {\nint *arr = (int *)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nallocate_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid print_message() {\nchar *msg = (char *)malloc(50 * sizeof(char));\nsprintf(msg, \"This is a test message.\");\nprintf(\"%s\\n\", msg);\nfree(msg);\n}\n\nint main() {\nprint_message();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid print_message() {\nchar *msg = (char *)malloc(50 * sizeof(char));\nsprintf(msg, \"This is a test message.\");\nprintf(\"%s\\n\", msg);\n}\n\nint main() {\nprint_message();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node *)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nstruct Node *tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 10);\nfree_list(head);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node *)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 10);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid read_input(char **input) {\n*input = (char *)malloc(256 * sizeof(char));\nif (*input == NULL) {\nfprintf(stderr, \"Memory allocation failed\\n\");\nreturn;\n}\nfgets(*input, 256, stdin);\n}\n\nint main() {\nchar *input = NULL;\nread_input(&input);\nprintf(\"Input: %s\", input);\nfree(input);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid read_input(char **input) {\n*input = (char *)malloc(256 * sizeof(char));\nif (*input == NULL) {\nfprintf(stderr, \"Memory allocation failed\\n\");\nreturn;\n}\nfgets(*input, 256, stdin);\n}\n\nint main() {\nchar *input = NULL;\nread_input(&input);\nprintf(\"Input: %s\", input);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid __memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nchar *create_string() {\nchar *str = (char *)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nchar *str = create_string();\nfree(str);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nchar *create_string() {\nchar *str = (char *)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\ncreate_string();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid __memory_in_loop(int n) {\nint *ptrs = (int *)malloc(sizeof(int) * n);\nfor (int i = 0; i < n; ++i) {\n// Use ptrs[i] instead of allocating individually\n}\nfree(ptrs);\n}\n\nint main() {\n__memory_in_loop(10);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory_in_loop(int n) {\nfor (int i = 0; i < n; ++i) {\nint *ptr = (int *)malloc(sizeof(int));\n}\n}\n\nint main() {\n_memory_in_loop(10);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node *create_de(int data) {\nstruct Node *de = (struct Node *)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nstruct Node *tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 1);\nfree_list(head);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node *create_de(int data) {\nstruct Node *de = (struct Node *)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 1);\n// Missing free() for head\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *__memory_func() {\nvoid *ptr = malloc(100);\nreturn ptr;\n}\n\nint main() {\nvoid *ptr = __memory_func();\nfree(ptr);\nreturn 0;\n}\n", "category": ["0", "1"], "output": "0"}
{"text": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *_memory_func() {\nvoid *ptr = malloc(100);\nreturn ptr;\n}\n\nint main() {\n_memory_func();\nreturn 0;\n}\n", "category": ["0", "1"], "output": "1"}
{"text": "struct testCode {\nchar i;\nint a;\nint * b;\nint * c[10];\n};\n\nvoid foo(void)\n{\nint j;\nstruct testCode * testST;\n\ntestST = (struct testCode *)malloc(sizeof(struct testCode));\n\nif(testST == NULL)\nreturn;\n\ntestST->a = 1;\n\ntestST->b = (int *)malloc(sizeof(int));\n\nfor(j = 0; j < 10; j++)\n{\ntestST->c[j] = (int *)malloc(sizeof(int));\n}\n\nif(testST->b != NULL)\nfree(testST->b);\n\nfor(j = 0; j < 10; j++)\n{\nfree(testST->c[j]);\n}\n\nfree(testST);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "0"}
{"text": "struct testCode {\nchar i;\nint a;\nint * b;\nint * c[10];\n};\n\nvoid foo(void)\n{\nint j;\nstruct testCode * testST;\nint * testVal;\n\ntestST = (struct testCode *)malloc(sizeof(struct testCode));\n\ntestST->c[4] = (int *)malloc(sizeof(int));\ntestST->c[9] = (int *)malloc(sizeof(int));\ntestST->c[13] = (int *)malloc(sizeof(int));\n\ntestVal = (int *)malloc(sizeof(int));\n\nfor(j = 0; j < 10; j++)\n{\nif(testST->c[j] != NULL)\nfree(testST->c[j]);\n}\n\nfree(testVal);\nfree(testST);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "1"}
{"text": "struct testCode {\nchar i;\nint a;\nint * b;\nint * c[10];\n};\n\nvoid foo(void)\n{\nint j;\nstruct testCode * testST;\n\ntestST = (struct testCode *)malloc(sizeof(struct testCode));\n\nif(testST == NULL)\nreturn;\n\ntestST->a = 1;\n\ntestST->b = (int *)malloc(sizeof(int));\n\nfor(j = 0; j < 10; j++)\n{\ntestST->c[j] = (int *)malloc(sizeof(int));\n}\n\nif(testST->b != NULL)\nfree(testST->b);\n\nfor(j = 0; j < 10; j++)\n{\nfree(testST->c[j]);\n}\n\nfree(testST);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "0"}
{"text": "struct testCode {\nchar i;\nint a;\nint * b;\nint * c[10];\n};\n\nvoid foo(void)\n{\nint j;\nstruct testCode * testST;\nint * testVal;\n\ntestST = (struct testCode *)malloc(sizeof(struct testCode));\n\ntestST->c[4] = (int *)malloc(sizeof(int));\ntestST->c[9] = (int *)malloc(sizeof(int));\n\ntestVal = (int *)malloc(sizeof(int));\n\nfor(j = 0; j < 5; j++)\n{\nif(testST->c[j] != NULL)\nfree(testST->c[j]);\n}\n\nfree(testVal);\nfree(testST);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "1"}
{"text": "struct testCode {\nchar i;\nint a;\nint * b;\nint * c[10];\n};\n\nvoid foo(void)\n{\nint j;\nstruct testCode * testST;\n\ntestST = (struct testCode *)malloc(sizeof(struct testCode));\n\nif(testST == NULL)\nreturn;\n\ntestST->a = 1;\n\ntestST->b = (int *)malloc(sizeof(int));\n\nfor(j = 0; j < 10; j++)\n{\ntestST->c[j] = (int *)malloc(sizeof(int));\n}\n\nif(testST->b != NULL)\nfree(testST->b);\n\nfor(j = 0; j < 10; j++)\n{\nfree(testST->c[j]);\n}\n\nfree(testST);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "0"}
{"text": "struct testCode {\nchar i;\nint a;\nint * b;\nint * c[10];\n};\n\nvoid foo(void)\n{\nint j;\nstruct testCode * testST;\nint * testVal;\n\ntestST = (struct testCode *)malloc(sizeof(struct testCode));\n\ntestST->c[4] = (int *)malloc(sizeof(int));\ntestST->c[9] = (int *)malloc(sizeof(int));\n\ntestVal = (int *)malloc(sizeof(int));\n\nfor(j = 0; j < 10; j++)\n{\nfree(testST->c[j]);\n}\n\nfree(testVal);\nfree(testST);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "1"}
{"text": "void foo(int test1)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\nfree(p);\nelse\ncontinue;\ntest1++;\n}\nprintf(\"test1 = %d\\n\",test1);\n}\n\nint main(void)\n{\nint test1 = 0;\nfoo(test1);\nreturn 0;\n}\n", "category": "", "output": "0"}
{"text": "int * foo(void)\n{\nint i;\nint * p = NULL;\n\nfor(i = 0; i < 10; i++)\n{\np = (int *)malloc(sizeof(int));\nif(p != NULL)\n*p = 1;\nelse\ncontinue;\nif(i >= 6)\nreturn p;\n}\n}\n\nint main(void)\n{\nint * p;\np = foo();\nfree(p);\nreturn 0;\n}\n", "category": "", "output": "1"}
{"text": "void foo(void)\n{\nint i[10];\nint * p = NULL;\n\np = (int *)malloc(sizeof(int));\n\nif(p != NULL)\nfree(p);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "0"}
{"text": "void foo(void)\n{\nint i[10];\nint * p = NULL;\n\np = (int *)malloc(sizeof(int));\n\nif(p != NULL)\n{\n*p = 1;\nfree(p);\n}\nfree(i);\n}\n\nint main(void)\n{\nfoo();\n\nreturn 0;\n}\n", "category": "", "output": "1"}
