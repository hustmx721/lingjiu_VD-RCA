[{"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* create_string() {\nchar *str = (char*)malloc(sizeof(char) * 100);\nreturn str;\n}\n\nint main() {\nchar *myStr = create_string();\nfree(myStr);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* create_string() {\nchar *str = (char*)malloc(sizeof(char) * 100);\nreturn str;\n}\n\nint main() {\nchar *myStr = create_string();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nif (ptr == NULL) {\nreturn;\n}\nif (some_condition) {\nfree(ptr);\nreturn;\n}\nfree(ptr);\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nif (ptr == NULL) {\nreturn;\n}\nif (some_condition) return;\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __in_loop() {\nfor (int i = 0; i < 10; i++) {\nint *ptr = (int*)malloc(sizeof(int));\nfree(ptr);\n}\n}\n\nint main() {\n__in_loop();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _in_loop() {\nfor (int i = 0; i < 10; i++) {\nint *ptr = (int*)malloc(sizeof(int));\n}\n}\n\nint main() {\n_in_loop();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _realloc_() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nint *temp = (int*)realloc(ptr, sizeof(int) * 20);\nif (temp == NULL) {\nfree(ptr);\nreturn;\n}\nptr = temp;\nfree(ptr);\n}\n\nint main() {\n_realloc_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid realloc_() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nptr = (int*)realloc(ptr, sizeof(int) * 20);\n}\n\nint main() {\nrealloc_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __function() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__function();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _function() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_function();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nint *global_ptr;\n\nvoid setup() {\nglobal_ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nvoid teardown() {\nfree(global_ptr);\n}\n\nint main() {\nsetup();\nteardown();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nint *global_ptr;\n\nvoid setup() {\nglobal_ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nvoid teardown() {\n}\n\nint main() {\nsetup();\nteardown();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(11 * sizeof(int));\nif (arr != NULL) {\narr[10] = 5;\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(10 * sizeof(int));\narr[10] = 5;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(6 * sizeof(int));\nif (arr != NULL) {\nfor (int i = 0; i < 6; i++) {\narr[i] = i;\n}\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(5 * sizeof(int));\nfor (int i = 0; i <= 5; i++) {\narr[i] = i;\n}\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(12 * sizeof(int));\nif (arr != NULL) {\narr[11] = 100;\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(10 * sizeof(int));\narr[11] = 100;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid safe_memory() {\nint n = 10;\nint *arr = (int*)malloc((n + 1) * sizeof(int));\nif (arr != NULL) {\narr[n] = 20;\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory() {\nint n = 10;\nint *arr = (int*)malloc(n * sizeof(int));\narr[n] = 20;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid safe_memory() {\nint *arr = (int*)malloc(6 * sizeof(int));\nif (arr != NULL) {\nint index = 6;\nif (index - 1 < 6) {\narr[index - 1] = 50;\n}\nfree(arr);\n}\n}\n\nint main() {\nsafe_memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory() {\nint *arr = (int*)malloc(5 * sizeof(int));\nint index = 6;\narr[index - 1] = 50;\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory_() {\nint *ptr = (int*)malloc(sizeof(int));\nif (ptr != NULL) {\n*ptr = 10;\nfree(ptr);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid memory_() {\nint *ptr = (int*)malloc(sizeof(int));\n*ptr = 10;\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <string.h>\n\nvoid _memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nif (str != NULL) {\nstrcpy(str, \"Hello, World!\");\nfree(str);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <string.h>\n\nvoid memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nif (arr != NULL) {\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nfree(arr);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid _memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nif (head != NULL) {\nhead->data = 1;\nhead->next = NULL;\nfree(head);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nhead->data = 1;\nhead->next = NULL;\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nif (ptr_array != NULL) {\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\nif (ptr_array[i] != NULL) {\n*(ptr_array[i]) = i;\n}\n}\nfor (int i = 0; i < 5; i++) {\nfree(ptr_array[i]);\n}\nfree(ptr_array);\n}\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\n*(ptr_array[i]) = i;\n}\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory_() {\nint *ptr = (int*)malloc(sizeof(int));\n*ptr = 10;\nint *new_ptr = (int*)malloc(sizeof(int));\n*new_ptr = 20;\nfree(new_ptr);\nfree(ptr);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid memory_() {\nint *ptr = (int*)malloc(sizeof(int));\n*ptr = 10;\nint *new_ptr = (int*)malloc(sizeof(int));\nptr = new_ptr;\n*new_ptr = 20;\nfree(ptr);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <string.h>\n\nvoid _memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\nchar *new_str = (char*)malloc(50 * sizeof(char));\nstrcpy(new_str, \"Goodbye!\");\nfree(new_str);\nfree(str);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <string.h>\n\nvoid memory_() {\nchar *str = (char*)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\nchar *new_str = (char*)malloc(50 * sizeof(char));\nstr = new_str;\nstrcpy(new_str, \"Goodbye!\");\nfree(str);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nint *new_arr = (int*)malloc(5 * sizeof(int));\nfor (int i = 0; i < 5; i++) {\nnew_arr[i] = i * 2;\n}\nfree(new_arr);\nfree(arr);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid memory_() {\nint *arr = (int*)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nint *new_arr = (int*)malloc(5 * sizeof(int));\narr = new_arr;\nfor (int i = 0; i < 5; i++) {\nnew_arr[i] = i * 2;\n}\nfree(arr);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid _memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nhead->data = 1;\nhead->next = NULL;\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nnew_de->data = 2;\nnew_de->next = NULL;\nfree(new_de);\nfree(head);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid memory_() {\nstruct Node *head = (struct Node*)malloc(sizeof(struct Node));\nhead->data = 1;\nhead->next = NULL;\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nhead = new_de;\nnew_de->data = 2;\nnew_de->next = NULL;\nfree(head);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid _memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\n*(ptr_array[i]) = i;\n}\nint **new_ptr_array = (int**)malloc(3 * sizeof(int*));\nfor (int i = 0; i < 3; i++) {\nnew_ptr_array[i] = (int*)malloc(sizeof(int));\n*(new_ptr_array[i]) = i * 10;\n}\nfor (int i = 0; i < 5; i++) {\nfree(ptr_array[i]);\n}\nfree(ptr_array);\nfor (int i = 0; i < 3; i++) {\nfree(new_ptr_array[i]);\n}\nfree(new_ptr_array);\n}\n\nint main() {\n_memory_();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid memory_() {\nint **ptr_array = (int**)malloc(5 * sizeof(int*));\nfor (int i = 0; i < 5; i++) {\nptr_array[i] = (int*)malloc(sizeof(int));\n*(ptr_array[i]) = i;\n}\nint **new_ptr_array = (int**)malloc(3 * sizeof(int*));\nptr_array = new_ptr_array;\nfor (int i = 0; i < 3; i++) {\nnew_ptr_array[i] = (int*)malloc(sizeof(int));\n*(new_ptr_array[i]) = i * 10;\n}\nfor (int i = 0; i < 3; i++) {\nfree(new_ptr_array[i]);\n}\nfree(ptr_array);\n}\n\nint main() {\nmemory_();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nint *ptr = malloc(10 * sizeof(int));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nint *ptr = malloc(10 * sizeof(int));\nchar *charPtr = (char *)ptr;\nfree(charPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\ndouble *ptr = malloc(10 * sizeof(double));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\ndouble *ptr = malloc(10 * sizeof(double));\nint *intPtr = (int *)ptr;\nfree(intPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nchar *ptr = malloc(100 * sizeof(char));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nchar *ptr = malloc(100 * sizeof(char));\nvoid *voidPtr = ptr;\nfree((int *)voidPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nfloat *ptr = malloc(5 * sizeof(float));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nfloat *ptr = malloc(5 * sizeof(float));\nshort *shortPtr = (short *)ptr;\nfree(shortPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nlong *ptr = malloc(8 * sizeof(long));\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid func() {\nlong *ptr = malloc(8 * sizeof(long));\nunsigned long *ulongPtr = (unsigned long *)ptr;\nfree((void **)ulongPtr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid use_memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\nwhile(1) {\nuse_memory();\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\nwhile(1) {\n_memory();\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(100 * sizeof(char));\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nwhile(1) {\nchar *my_str = create_string();\nfree(my_str);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(100 * sizeof(char));\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nwhile(1) {\nchar *my_str = create_string();\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int size) {\nint *data = (int*)malloc(size * sizeof(int));\nfree(data);\n}\n\nint main() {\nfor(int i = 0; i < 1000; i++) {\nprocess_data(100);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int size) {\nint *data = (int*)malloc(size * sizeof(int));\n}\n\nint main() {\nfor(int i = 0; i < 1000; i++) {\nprocess_data(100);\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_to_list(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nwhile(head != NULL) {\nstruct Node *temp = head;\nhead = head->next;\nfree(temp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor(int i = 0; i < 1000; i++) {\nadd_to_list(&head, i);\n}\nfree_list(head);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_to_list(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head = NULL;\nfor(int i = 0; i < 1000; i++) {\nadd_to_list(&head, i);\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource = malloc(1024);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n}\n\nvoid free_resource(void *resource) {\nfree(resource);\n}\n\nint main() {\nwhile(1) {\nvoid *resource = create_resource();\nuse_resource(resource);\nfree_resource(resource);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource = malloc(1024);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n}\n\nint main() {\nwhile(1) {\nvoid *resource = create_resource();\nuse_resource(resource);\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _() {\nchar *buffer = (char*)malloc(100);\nfree(buffer);\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\n_();\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid () {\nchar *buffer = (char*)malloc(100);\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\n();\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(50);\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nchar *my_str = create_string();\nfree(my_str);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nchar *create_string() {\nchar *str = (char*)malloc(50);\nsprintf(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nchar *my_str = create_string();\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int *data, int size) {\n// 处理数据...\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nint *data = (int*)malloc(100 * sizeof(int));\nprocess_data(data, 100);\nfree(data);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data(int *data, int size) {\n// 处理数据...\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nint *data = (int*)malloc(100 * sizeof(int));\nprocess_data(data, 100);\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nif (*head == NULL) {\n*head = new_de;\n} else {\nstruct Node *current = *head;\nwhile (current->next != NULL) {\ncurrent = current->next;\n}\ncurrent->next = new_de;\n}\n}\n\nvoid free_list(struct Node *head) {\nwhile (head != NULL) {\nstruct Node *temp = head;\nhead = head->next;\nfree(temp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor (int i = 0; i < 1000; i++) {\nappend_de(&head, i);\n}\nfree_list(head);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node* create_de(int data) {\nstruct Node *de = (struct Node*)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nif (*head == NULL) {\n*head = new_de;\n} else {\nstruct Node *current = *head;\nwhile (current->next != NULL) {\ncurrent = current->next;\n}\ncurrent->next = new_de;\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor (int i = 0; i < 1000; i++) {\nappend_de(&head, i);\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *allocate_resource() {\nvoid *resource = malloc(256);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n// 使用资源...\n}\n\nvoid free_resource(void *resource) {\nfree(resource);\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nvoid *resource = allocate_resource();\nuse_resource(resource);\nfree_resource(resource);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *allocate_resource() {\nvoid *resource = malloc(256);\nreturn resource;\n}\n\nvoid use_resource(void *resource) {\n// 使用资源...\n}\n\nint main() {\nfor (int i = 0; i < 1000; i++) {\nvoid *resource = allocate_resource();\nuse_resource(resource);\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid __memory() {\nchar *buffer = (char*)malloc(100);\nfree(buffer);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory() {\nchar *buffer;\nfree(buffer);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nwhile (head != NULL) {\nstruct Node *temp = head;\nhead = head->next;\nfree(temp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nfor (int i = 0; i < 10; i++) {\nappend_de(&head, i);\n}\nfree_list(head);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid append_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node*)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head;\nfor (int i = 0; i < 10; i++) {\nappend_de(&head, i);\n}\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data() {\nchar *buffer = (char*)malloc(100);\nif (buffer != NULL) {\nsprintf(buffer, \"Data\");\nfree(buffer);\n}\n}\n\nint main() {\nprocess_data();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid process_data() {\nchar *buffer;\nsprintf(buffer, \"Data\");\n}\n\nint main() {\nprocess_data();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource = malloc(256);\nreturn resource;\n}\n\nvoid use_and_free_resource(void *resource) {\nif (resource != NULL) {\nfree(resource);\n}\n}\n\nint main() {\nvoid *resource = create_resource();\nuse_and_free_resource(resource);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *create_resource() {\nvoid *resource;\nreturn resource;\n}\n\nvoid use_and_free_resource(void *resource) {\nfree(resource);\n}\n\nint main() {\nvoid *resource = create_resource();\nuse_and_free_resource(resource);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Data {\nint *values;\nint size;\n};\n\nstruct Data *initialize_data(int size) {\nstruct Data *data = (struct Data*)malloc(sizeof(struct Data));\nif (data != NULL) {\ndata->values = (int*)malloc(size * sizeof(int));\nif (data->values != NULL) {\ndata->size = size;\nfor (int i = 0; i < size; i++) {\ndata->values[i] = i;\n}\n} else {\nfree(data);\ndata = NULL;\n}\n}\nreturn data;\n}\n\nvoid free_data(struct Data *data) {\nif (data != NULL) {\nif (data->values != NULL) {\nfree(data->values);\n}\nfree(data);\n}\n}\n\nint main() {\nstruct Data *my_data = initialize_data(10);\nif (my_data != NULL) {\nfree_data(my_data);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Data {\nint *values;\nint size;\n};\n\nstruct Data *initialize_data(int size) {\nstruct Data *data = (struct Data*)malloc(sizeof(struct Data));\ndata->size = size;\nfor (int i = 0; i < size; i++) {\ndata->values[i] = i;\n}\nreturn data;\n}\n\nint main() {\nstruct Data *my_data = initialize_data(10);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory_loop() {\nint *ptrs[10];\nfor (int i = 0; i < 10; i++) {\nptrs[i] = (int *)malloc(sizeof(int));\n}\nfor (int i = 0; i < 10; i++) {\nfree(ptrs[i]);\n}\n}\n\nint main() {\n__memory_loop();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory_loop() {\nfor (int i = 0; i < 10; i++) {\nint *ptr = (int *)malloc(sizeof(int));\n}\n}\n\nint main() {\n_memory_loop();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid __memory_on_error() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nif (!ptr) {\nperror(\"malloc failed\");\nexit(EXIT_FAILURE);\n}\nif (1) {\nfree(ptr);\nperror(\"Simulated error\");\nexit(EXIT_FAILURE);\n}\nfree(ptr);\n}\n\nint main() {\n__memory_on_error();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid _memory_on_error() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nif (!ptr) {\nperror(\"malloc failed\");\nexit(EXIT_FAILURE);\n}\nif (1) {\nperror(\"Simulated error\");\nexit(EXIT_FAILURE);\n}\n}\n\nint main() {\n_memory_on_error();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nint *__memory_return() {\nreturn (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\nint *ptr = __memory_return();\nfree(ptr);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nint *_memory_return() {\nreturn (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\nint *ptr = _memory_return();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func() {\nint *ptr = (int*)malloc(sizeof(int) * 10);\n}\n\nint main() {\nfunc();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray() {\nreturn (int*)malloc(sizeof(int) * 100);\n}\n\nint main() {\nint *arr = createArray();\nfree(arr);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray() {\nreturn (int*)malloc(sizeof(int) * 100);\n}\n\nint main() {\nint *arr = createArray();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* getString() {\nchar *str = (char*)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nchar *myStr = getString();\nprintf(\"%s\\n\", myStr);\nfree(myStr);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* getString() {\nchar *str = (char*)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nchar *myStr = getString();\nprintf(\"%s\\n\", myStr);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node* next;\n};\n\nstruct Node* createNode(int data) {\nstruct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\nnewNode->data = data;\nnewNode->next = NULL;\nreturn newNode;\n}\n\nvoid freeList(struct Node* head) {\nstruct Node* tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node* head = createNode(10);\nfreeList(head);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node* next;\n};\n\nstruct Node* createNode(int data) {\nstruct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\nnewNode->data = data;\nnewNode->next = NULL;\nreturn newNode;\n}\n\nint main() {\nstruct Node* head = createNode(10);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid processData() {\nint *dataArray = (int*)malloc(sizeof(int) * 5);\nfor (int i = 0; i < 5; i++) {\ndataArray[i] = i * 10;\n}\n// Process data...\nfree(dataArray);\n}\n\nint main() {\nprocessData();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid processData() {\nint *dataArray = (int*)malloc(sizeof(int) * 5);\nfor (int i = 0; i < 5; i++) {\ndataArray[i] = i * 10;\n}\n// Process data...\n}\n\nint main() {\nprocessData();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr = (int*)malloc(sizeof(int));\nif (ptr != NULL) {\n*ptr = 10;\nfree(ptr);\n}\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid process() {\nint *ptr;\n*ptr = 10;\n}\n\nint main() {\nprocess();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid copyString(char *dest, const char *src) {\nstrcpy(dest, src);\n}\n\nint main() {\nchar *myString = (char*)malloc(strlen(\"Hello, world!\") + 1);\nif (myString != NULL) {\ncopyString(myString, \"Hello, world!\");\nprintf(\"%s\\n\", myString);\nfree(myString);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid copyString(char *dest, const char *src) {\nstrcpy(dest, src);\n}\n\nint main() {\nchar *myString;\ncopyString(myString, \"Hello, world!\");\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid appendNode(struct Node **head, int data) {\nstruct Node *newNode = (struct Node*)malloc(sizeof(struct Node));\nif (newNode != NULL) {\nnewNode->data = data;\nnewNode->next = *head;\n*head = newNode;\n}\n}\n\nvoid freeList(struct Node *head) {\nstruct Node *tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nappendNode(&head, 10);\nfreeList(head);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid appendNode(struct Node **head, int data) {\nstruct Node *newNode;\nnewNode->data = data;\nnewNode->next = *head;\n*head = newNode;\n}\n\nint main() {\nstruct Node *head = NULL;\nappendNode(&head, 10);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid createArray() {\nint *arr = (int*)malloc(sizeof(int) * 10);\nif (arr != NULL) {\narr[0] = 1;\nfree(arr);\n}\n}\n\nint main() {\ncreateArray();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid createArray() {\nint *arr;\narr[0] = 1;\n}\n\nint main() {\ncreateArray();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid fillArray(int *arr, int size) {\nfor (int i = 0; i < size; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nint *myArray = (int*)malloc(sizeof(int) * 10);\nif (myArray != NULL) {\nfillArray(myArray, 10);\nfree(myArray);\n}\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid fillArray(int *arr, int size) {\nfor (int i = 0; i < size; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nint *myArray;\nfillArray(myArray, 10);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <string.h>\n\nvoid create_string() {\nchar *str = (char *)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\nfree(str);\n}\n\nint main() {\ncreate_string();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <string.h>\n\nvoid create_string() {\nchar *str = (char *)malloc(100 * sizeof(char));\nstrcpy(str, \"Hello, World!\");\n}\n\nint main() {\ncreate_string();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nvoid allocate_memory() {\nint *arr = (int *)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\nfree(arr);\n}\n\nint main() {\nallocate_memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nvoid allocate_memory() {\nint *arr = (int *)malloc(10 * sizeof(int));\nfor (int i = 0; i < 10; i++) {\narr[i] = i;\n}\n}\n\nint main() {\nallocate_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid print_message() {\nchar *msg = (char *)malloc(50 * sizeof(char));\nsprintf(msg, \"This is a test message.\");\nprintf(\"%s\\n\", msg);\nfree(msg);\n}\n\nint main() {\nprint_message();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid print_message() {\nchar *msg = (char *)malloc(50 * sizeof(char));\nsprintf(msg, \"This is a test message.\");\nprintf(\"%s\\n\", msg);\n}\n\nint main() {\nprint_message();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node *)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nstruct Node *tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 10);\nfree_list(head);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = (struct Node *)malloc(sizeof(struct Node));\nnew_de->data = data;\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 10);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid read_input(char **input) {\n*input = (char *)malloc(256 * sizeof(char));\nif (*input == NULL) {\nfprintf(stderr, \"Memory allocation failed\\n\");\nreturn;\n}\nfgets(*input, 256, stdin);\n}\n\nint main() {\nchar *input = NULL;\nread_input(&input);\nprintf(\"Input: %s\", input);\nfree(input);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid read_input(char **input) {\n*input = (char *)malloc(256 * sizeof(char));\nif (*input == NULL) {\nfprintf(stderr, \"Memory allocation failed\\n\");\nreturn;\n}\nfgets(*input, 256, stdin);\n}\n\nint main() {\nchar *input = NULL;\nread_input(&input);\nprintf(\"Input: %s\", input);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid __memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\nfree(ptr);\n}\n\nint main() {\n__memory();\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory() {\nint *ptr = (int *)malloc(sizeof(int) * 10);\n}\n\nint main() {\n_memory();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nchar *create_string() {\nchar *str = (char *)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\nchar *str = create_string();\nfree(str);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nchar *create_string() {\nchar *str = (char *)malloc(100);\nstrcpy(str, \"Hello, World!\");\nreturn str;\n}\n\nint main() {\ncreate_string();\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid __memory_in_loop(int n) {\nint *ptrs = (int *)malloc(sizeof(int) * n);\nfor (int i = 0; i < n; ++i) {\n// Use ptrs[i] instead of allocating individually\n}\nfree(ptrs);\n}\n\nint main() {\n__memory_in_loop(10);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid _memory_in_loop(int n) {\nfor (int i = 0; i < n; ++i) {\nint *ptr = (int *)malloc(sizeof(int));\n}\n}\n\nint main() {\n_memory_in_loop(10);\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node *create_de(int data) {\nstruct Node *de = (struct Node *)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nvoid free_list(struct Node *head) {\nstruct Node *tmp;\nwhile (head != NULL) {\ntmp = head;\nhead = head->next;\nfree(tmp);\n}\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 1);\nfree_list(head);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nstruct Node {\nint data;\nstruct Node *next;\n};\n\nstruct Node *create_de(int data) {\nstruct Node *de = (struct Node *)malloc(sizeof(struct Node));\nde->data = data;\nde->next = NULL;\nreturn de;\n}\n\nvoid add_de(struct Node **head, int data) {\nstruct Node *new_de = create_de(data);\nnew_de->next = *head;\n*head = new_de;\n}\n\nint main() {\nstruct Node *head = NULL;\nadd_de(&head, 1);\n// Missing free() for head\nreturn 0;\n}\n", "input": "", "output": "1"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *__memory_func() {\nvoid *ptr = malloc(100);\nreturn ptr;\n}\n\nint main() {\nvoid *ptr = __memory_func();\nfree(ptr);\nreturn 0;\n}\n", "input": "", "output": "0"}, {"instruction": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid *_memory_func() {\nvoid *ptr = malloc(100);\nreturn ptr;\n}\n\nint main() {\n_memory_func();\nreturn 0;\n}\n", "input": "", "output": "1"}]